// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/data/rcpsp.proto

#ifndef PROTOBUF_INCLUDED_ortools_2fdata_2frcpsp_2eproto
#define PROTOBUF_INCLUDED_ortools_2fdata_2frcpsp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fdata_2frcpsp_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fdata_2frcpsp_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ortools_2fdata_2frcpsp_2eproto();
namespace operations_research {
namespace data {
namespace rcpsp {
class PerRecipeDelays;
class PerRecipeDelaysDefaultTypeInternal;
extern PerRecipeDelaysDefaultTypeInternal _PerRecipeDelays_default_instance_;
class PerSuccessorDelays;
class PerSuccessorDelaysDefaultTypeInternal;
extern PerSuccessorDelaysDefaultTypeInternal _PerSuccessorDelays_default_instance_;
class RcpspProblem;
class RcpspProblemDefaultTypeInternal;
extern RcpspProblemDefaultTypeInternal _RcpspProblem_default_instance_;
class Recipe;
class RecipeDefaultTypeInternal;
extern RecipeDefaultTypeInternal _Recipe_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace rcpsp
}  // namespace data
}  // namespace operations_research
namespace google {
namespace protobuf {
template<> ::operations_research::data::rcpsp::PerRecipeDelays* Arena::CreateMaybeMessage<::operations_research::data::rcpsp::PerRecipeDelays>(Arena*);
template<> ::operations_research::data::rcpsp::PerSuccessorDelays* Arena::CreateMaybeMessage<::operations_research::data::rcpsp::PerSuccessorDelays>(Arena*);
template<> ::operations_research::data::rcpsp::RcpspProblem* Arena::CreateMaybeMessage<::operations_research::data::rcpsp::RcpspProblem>(Arena*);
template<> ::operations_research::data::rcpsp::Recipe* Arena::CreateMaybeMessage<::operations_research::data::rcpsp::Recipe>(Arena*);
template<> ::operations_research::data::rcpsp::Resource* Arena::CreateMaybeMessage<::operations_research::data::rcpsp::Resource>(Arena*);
template<> ::operations_research::data::rcpsp::Task* Arena::CreateMaybeMessage<::operations_research::data::rcpsp::Task>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace operations_research {
namespace data {
namespace rcpsp {

// ===================================================================

class Resource :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.data.rcpsp.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Resource* other);
  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(nullptr);
  }

  Resource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 max_capacity = 1;
  void clear_max_capacity();
  static const int kMaxCapacityFieldNumber = 1;
  ::google::protobuf::int32 max_capacity() const;
  void set_max_capacity(::google::protobuf::int32 value);

  // int32 min_capacity = 2;
  void clear_min_capacity();
  static const int kMinCapacityFieldNumber = 2;
  ::google::protobuf::int32 min_capacity() const;
  void set_min_capacity(::google::protobuf::int32 value);

  // bool renewable = 3;
  void clear_renewable();
  static const int kRenewableFieldNumber = 3;
  bool renewable() const;
  void set_renewable(bool value);

  // int32 unit_cost = 4;
  void clear_unit_cost();
  static const int kUnitCostFieldNumber = 4;
  ::google::protobuf::int32 unit_cost() const;
  void set_unit_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:operations_research.data.rcpsp.Resource)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 max_capacity_;
  ::google::protobuf::int32 min_capacity_;
  bool renewable_;
  ::google::protobuf::int32 unit_cost_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fdata_2frcpsp_2eproto;
};
// -------------------------------------------------------------------

class Recipe :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.data.rcpsp.Recipe) */ {
 public:
  Recipe();
  virtual ~Recipe();

  Recipe(const Recipe& from);

  inline Recipe& operator=(const Recipe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Recipe(Recipe&& from) noexcept
    : Recipe() {
    *this = ::std::move(from);
  }

  inline Recipe& operator=(Recipe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Recipe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Recipe* internal_default_instance() {
    return reinterpret_cast<const Recipe*>(
               &_Recipe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Recipe* other);
  friend void swap(Recipe& a, Recipe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Recipe* New() const final {
    return CreateMaybeMessage<Recipe>(nullptr);
  }

  Recipe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Recipe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Recipe& from);
  void MergeFrom(const Recipe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recipe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 demands = 2;
  int demands_size() const;
  void clear_demands();
  static const int kDemandsFieldNumber = 2;
  ::google::protobuf::int32 demands(int index) const;
  void set_demands(int index, ::google::protobuf::int32 value);
  void add_demands(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      demands() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_demands();

  // repeated int32 resources = 3;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 3;
  ::google::protobuf::int32 resources(int index) const;
  void set_resources(int index, ::google::protobuf::int32 value);
  void add_resources(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resources() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resources();

  // int32 duration = 1;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:operations_research.data.rcpsp.Recipe)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > demands_;
  mutable std::atomic<int> _demands_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resources_;
  mutable std::atomic<int> _resources_cached_byte_size_;
  ::google::protobuf::int32 duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fdata_2frcpsp_2eproto;
};
// -------------------------------------------------------------------

class PerRecipeDelays :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.data.rcpsp.PerRecipeDelays) */ {
 public:
  PerRecipeDelays();
  virtual ~PerRecipeDelays();

  PerRecipeDelays(const PerRecipeDelays& from);

  inline PerRecipeDelays& operator=(const PerRecipeDelays& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerRecipeDelays(PerRecipeDelays&& from) noexcept
    : PerRecipeDelays() {
    *this = ::std::move(from);
  }

  inline PerRecipeDelays& operator=(PerRecipeDelays&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PerRecipeDelays& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerRecipeDelays* internal_default_instance() {
    return reinterpret_cast<const PerRecipeDelays*>(
               &_PerRecipeDelays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PerRecipeDelays* other);
  friend void swap(PerRecipeDelays& a, PerRecipeDelays& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerRecipeDelays* New() const final {
    return CreateMaybeMessage<PerRecipeDelays>(nullptr);
  }

  PerRecipeDelays* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerRecipeDelays>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerRecipeDelays& from);
  void MergeFrom(const PerRecipeDelays& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerRecipeDelays* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 min_delays = 1;
  int min_delays_size() const;
  void clear_min_delays();
  static const int kMinDelaysFieldNumber = 1;
  ::google::protobuf::int32 min_delays(int index) const;
  void set_min_delays(int index, ::google::protobuf::int32 value);
  void add_min_delays(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      min_delays() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_min_delays();

  // @@protoc_insertion_point(class_scope:operations_research.data.rcpsp.PerRecipeDelays)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > min_delays_;
  mutable std::atomic<int> _min_delays_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fdata_2frcpsp_2eproto;
};
// -------------------------------------------------------------------

class PerSuccessorDelays :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.data.rcpsp.PerSuccessorDelays) */ {
 public:
  PerSuccessorDelays();
  virtual ~PerSuccessorDelays();

  PerSuccessorDelays(const PerSuccessorDelays& from);

  inline PerSuccessorDelays& operator=(const PerSuccessorDelays& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerSuccessorDelays(PerSuccessorDelays&& from) noexcept
    : PerSuccessorDelays() {
    *this = ::std::move(from);
  }

  inline PerSuccessorDelays& operator=(PerSuccessorDelays&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PerSuccessorDelays& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerSuccessorDelays* internal_default_instance() {
    return reinterpret_cast<const PerSuccessorDelays*>(
               &_PerSuccessorDelays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PerSuccessorDelays* other);
  friend void swap(PerSuccessorDelays& a, PerSuccessorDelays& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerSuccessorDelays* New() const final {
    return CreateMaybeMessage<PerSuccessorDelays>(nullptr);
  }

  PerSuccessorDelays* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerSuccessorDelays>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerSuccessorDelays& from);
  void MergeFrom(const PerSuccessorDelays& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerSuccessorDelays* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .operations_research.data.rcpsp.PerRecipeDelays recipe_delays = 1;
  int recipe_delays_size() const;
  void clear_recipe_delays();
  static const int kRecipeDelaysFieldNumber = 1;
  ::operations_research::data::rcpsp::PerRecipeDelays* mutable_recipe_delays(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerRecipeDelays >*
      mutable_recipe_delays();
  const ::operations_research::data::rcpsp::PerRecipeDelays& recipe_delays(int index) const;
  ::operations_research::data::rcpsp::PerRecipeDelays* add_recipe_delays();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerRecipeDelays >&
      recipe_delays() const;

  // @@protoc_insertion_point(class_scope:operations_research.data.rcpsp.PerSuccessorDelays)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerRecipeDelays > recipe_delays_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fdata_2frcpsp_2eproto;
};
// -------------------------------------------------------------------

class Task :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.data.rcpsp.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 successors = 1;
  int successors_size() const;
  void clear_successors();
  static const int kSuccessorsFieldNumber = 1;
  ::google::protobuf::int32 successors(int index) const;
  void set_successors(int index, ::google::protobuf::int32 value);
  void add_successors(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      successors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_successors();

  // repeated .operations_research.data.rcpsp.Recipe recipes = 2;
  int recipes_size() const;
  void clear_recipes();
  static const int kRecipesFieldNumber = 2;
  ::operations_research::data::rcpsp::Recipe* mutable_recipes(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Recipe >*
      mutable_recipes();
  const ::operations_research::data::rcpsp::Recipe& recipes(int index) const;
  ::operations_research::data::rcpsp::Recipe* add_recipes();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Recipe >&
      recipes() const;

  // repeated .operations_research.data.rcpsp.PerSuccessorDelays successor_delays = 3;
  int successor_delays_size() const;
  void clear_successor_delays();
  static const int kSuccessorDelaysFieldNumber = 3;
  ::operations_research::data::rcpsp::PerSuccessorDelays* mutable_successor_delays(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerSuccessorDelays >*
      mutable_successor_delays();
  const ::operations_research::data::rcpsp::PerSuccessorDelays& successor_delays(int index) const;
  ::operations_research::data::rcpsp::PerSuccessorDelays* add_successor_delays();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerSuccessorDelays >&
      successor_delays() const;

  // @@protoc_insertion_point(class_scope:operations_research.data.rcpsp.Task)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > successors_;
  mutable std::atomic<int> _successors_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Recipe > recipes_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerSuccessorDelays > successor_delays_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fdata_2frcpsp_2eproto;
};
// -------------------------------------------------------------------

class RcpspProblem :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.data.rcpsp.RcpspProblem) */ {
 public:
  RcpspProblem();
  virtual ~RcpspProblem();

  RcpspProblem(const RcpspProblem& from);

  inline RcpspProblem& operator=(const RcpspProblem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RcpspProblem(RcpspProblem&& from) noexcept
    : RcpspProblem() {
    *this = ::std::move(from);
  }

  inline RcpspProblem& operator=(RcpspProblem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RcpspProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RcpspProblem* internal_default_instance() {
    return reinterpret_cast<const RcpspProblem*>(
               &_RcpspProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RcpspProblem* other);
  friend void swap(RcpspProblem& a, RcpspProblem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RcpspProblem* New() const final {
    return CreateMaybeMessage<RcpspProblem>(nullptr);
  }

  RcpspProblem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RcpspProblem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RcpspProblem& from);
  void MergeFrom(const RcpspProblem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcpspProblem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .operations_research.data.rcpsp.Resource resources = 1;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 1;
  ::operations_research::data::rcpsp::Resource* mutable_resources(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Resource >*
      mutable_resources();
  const ::operations_research::data::rcpsp::Resource& resources(int index) const;
  ::operations_research::data::rcpsp::Resource* add_resources();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Resource >&
      resources() const;

  // repeated .operations_research.data.rcpsp.Task tasks = 2;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 2;
  ::operations_research::data::rcpsp::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Task >*
      mutable_tasks();
  const ::operations_research::data::rcpsp::Task& tasks(int index) const;
  ::operations_research::data::rcpsp::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Task >&
      tasks() const;

  // string basedata = 12;
  void clear_basedata();
  static const int kBasedataFieldNumber = 12;
  const ::std::string& basedata() const;
  void set_basedata(const ::std::string& value);
  #if LANG_CXX11
  void set_basedata(::std::string&& value);
  #endif
  void set_basedata(const char* value);
  void set_basedata(const char* value, size_t size);
  ::std::string* mutable_basedata();
  ::std::string* release_basedata();
  void set_allocated_basedata(::std::string* basedata);

  // string name = 14;
  void clear_name();
  static const int kNameFieldNumber = 14;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool is_consumer_producer = 3;
  void clear_is_consumer_producer();
  static const int kIsConsumerProducerFieldNumber = 3;
  bool is_consumer_producer() const;
  void set_is_consumer_producer(bool value);

  // bool is_resource_investment = 4;
  void clear_is_resource_investment();
  static const int kIsResourceInvestmentFieldNumber = 4;
  bool is_resource_investment() const;
  void set_is_resource_investment(bool value);

  // bool is_rcpsp_max = 5;
  void clear_is_rcpsp_max();
  static const int kIsRcpspMaxFieldNumber = 5;
  bool is_rcpsp_max() const;
  void set_is_rcpsp_max(bool value);

  // int32 deadline = 6;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 6;
  ::google::protobuf::int32 deadline() const;
  void set_deadline(::google::protobuf::int32 value);

  // int32 horizon = 7;
  void clear_horizon();
  static const int kHorizonFieldNumber = 7;
  ::google::protobuf::int32 horizon() const;
  void set_horizon(::google::protobuf::int32 value);

  // int32 release_date = 8;
  void clear_release_date();
  static const int kReleaseDateFieldNumber = 8;
  ::google::protobuf::int32 release_date() const;
  void set_release_date(::google::protobuf::int32 value);

  // int32 tardiness_cost = 9;
  void clear_tardiness_cost();
  static const int kTardinessCostFieldNumber = 9;
  ::google::protobuf::int32 tardiness_cost() const;
  void set_tardiness_cost(::google::protobuf::int32 value);

  // int32 mpm_time = 10;
  void clear_mpm_time();
  static const int kMpmTimeFieldNumber = 10;
  ::google::protobuf::int32 mpm_time() const;
  void set_mpm_time(::google::protobuf::int32 value);

  // int64 seed = 11;
  void clear_seed();
  static const int kSeedFieldNumber = 11;
  ::google::protobuf::int64 seed() const;
  void set_seed(::google::protobuf::int64 value);

  // int32 due_date = 13;
  void clear_due_date();
  static const int kDueDateFieldNumber = 13;
  ::google::protobuf::int32 due_date() const;
  void set_due_date(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:operations_research.data.rcpsp.RcpspProblem)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Resource > resources_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Task > tasks_;
  ::google::protobuf::internal::ArenaStringPtr basedata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool is_consumer_producer_;
  bool is_resource_investment_;
  bool is_rcpsp_max_;
  ::google::protobuf::int32 deadline_;
  ::google::protobuf::int32 horizon_;
  ::google::protobuf::int32 release_date_;
  ::google::protobuf::int32 tardiness_cost_;
  ::google::protobuf::int32 mpm_time_;
  ::google::protobuf::int64 seed_;
  ::google::protobuf::int32 due_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fdata_2frcpsp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Resource

// int32 max_capacity = 1;
inline void Resource::clear_max_capacity() {
  max_capacity_ = 0;
}
inline ::google::protobuf::int32 Resource::max_capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Resource.max_capacity)
  return max_capacity_;
}
inline void Resource::set_max_capacity(::google::protobuf::int32 value) {
  
  max_capacity_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Resource.max_capacity)
}

// int32 min_capacity = 2;
inline void Resource::clear_min_capacity() {
  min_capacity_ = 0;
}
inline ::google::protobuf::int32 Resource::min_capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Resource.min_capacity)
  return min_capacity_;
}
inline void Resource::set_min_capacity(::google::protobuf::int32 value) {
  
  min_capacity_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Resource.min_capacity)
}

// bool renewable = 3;
inline void Resource::clear_renewable() {
  renewable_ = false;
}
inline bool Resource::renewable() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Resource.renewable)
  return renewable_;
}
inline void Resource::set_renewable(bool value) {
  
  renewable_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Resource.renewable)
}

// int32 unit_cost = 4;
inline void Resource::clear_unit_cost() {
  unit_cost_ = 0;
}
inline ::google::protobuf::int32 Resource::unit_cost() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Resource.unit_cost)
  return unit_cost_;
}
inline void Resource::set_unit_cost(::google::protobuf::int32 value) {
  
  unit_cost_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Resource.unit_cost)
}

// -------------------------------------------------------------------

// Recipe

// int32 duration = 1;
inline void Recipe::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 Recipe::duration() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Recipe.duration)
  return duration_;
}
inline void Recipe::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Recipe.duration)
}

// repeated int32 demands = 2;
inline int Recipe::demands_size() const {
  return demands_.size();
}
inline void Recipe::clear_demands() {
  demands_.Clear();
}
inline ::google::protobuf::int32 Recipe::demands(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Recipe.demands)
  return demands_.Get(index);
}
inline void Recipe::set_demands(int index, ::google::protobuf::int32 value) {
  demands_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Recipe.demands)
}
inline void Recipe::add_demands(::google::protobuf::int32 value) {
  demands_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.Recipe.demands)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Recipe::demands() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.Recipe.demands)
  return demands_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Recipe::mutable_demands() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.Recipe.demands)
  return &demands_;
}

// repeated int32 resources = 3;
inline int Recipe::resources_size() const {
  return resources_.size();
}
inline void Recipe::clear_resources() {
  resources_.Clear();
}
inline ::google::protobuf::int32 Recipe::resources(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Recipe.resources)
  return resources_.Get(index);
}
inline void Recipe::set_resources(int index, ::google::protobuf::int32 value) {
  resources_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Recipe.resources)
}
inline void Recipe::add_resources(::google::protobuf::int32 value) {
  resources_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.Recipe.resources)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Recipe::resources() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.Recipe.resources)
  return resources_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Recipe::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.Recipe.resources)
  return &resources_;
}

// -------------------------------------------------------------------

// PerRecipeDelays

// repeated int32 min_delays = 1;
inline int PerRecipeDelays::min_delays_size() const {
  return min_delays_.size();
}
inline void PerRecipeDelays::clear_min_delays() {
  min_delays_.Clear();
}
inline ::google::protobuf::int32 PerRecipeDelays::min_delays(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.PerRecipeDelays.min_delays)
  return min_delays_.Get(index);
}
inline void PerRecipeDelays::set_min_delays(int index, ::google::protobuf::int32 value) {
  min_delays_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.PerRecipeDelays.min_delays)
}
inline void PerRecipeDelays::add_min_delays(::google::protobuf::int32 value) {
  min_delays_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.PerRecipeDelays.min_delays)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PerRecipeDelays::min_delays() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.PerRecipeDelays.min_delays)
  return min_delays_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PerRecipeDelays::mutable_min_delays() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.PerRecipeDelays.min_delays)
  return &min_delays_;
}

// -------------------------------------------------------------------

// PerSuccessorDelays

// repeated .operations_research.data.rcpsp.PerRecipeDelays recipe_delays = 1;
inline int PerSuccessorDelays::recipe_delays_size() const {
  return recipe_delays_.size();
}
inline void PerSuccessorDelays::clear_recipe_delays() {
  recipe_delays_.Clear();
}
inline ::operations_research::data::rcpsp::PerRecipeDelays* PerSuccessorDelays::mutable_recipe_delays(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.PerSuccessorDelays.recipe_delays)
  return recipe_delays_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerRecipeDelays >*
PerSuccessorDelays::mutable_recipe_delays() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.PerSuccessorDelays.recipe_delays)
  return &recipe_delays_;
}
inline const ::operations_research::data::rcpsp::PerRecipeDelays& PerSuccessorDelays::recipe_delays(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.PerSuccessorDelays.recipe_delays)
  return recipe_delays_.Get(index);
}
inline ::operations_research::data::rcpsp::PerRecipeDelays* PerSuccessorDelays::add_recipe_delays() {
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.PerSuccessorDelays.recipe_delays)
  return recipe_delays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerRecipeDelays >&
PerSuccessorDelays::recipe_delays() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.PerSuccessorDelays.recipe_delays)
  return recipe_delays_;
}

// -------------------------------------------------------------------

// Task

// repeated int32 successors = 1;
inline int Task::successors_size() const {
  return successors_.size();
}
inline void Task::clear_successors() {
  successors_.Clear();
}
inline ::google::protobuf::int32 Task::successors(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Task.successors)
  return successors_.Get(index);
}
inline void Task::set_successors(int index, ::google::protobuf::int32 value) {
  successors_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.Task.successors)
}
inline void Task::add_successors(::google::protobuf::int32 value) {
  successors_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.Task.successors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Task::successors() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.Task.successors)
  return successors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Task::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.Task.successors)
  return &successors_;
}

// repeated .operations_research.data.rcpsp.Recipe recipes = 2;
inline int Task::recipes_size() const {
  return recipes_.size();
}
inline void Task::clear_recipes() {
  recipes_.Clear();
}
inline ::operations_research::data::rcpsp::Recipe* Task::mutable_recipes(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.Task.recipes)
  return recipes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Recipe >*
Task::mutable_recipes() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.Task.recipes)
  return &recipes_;
}
inline const ::operations_research::data::rcpsp::Recipe& Task::recipes(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Task.recipes)
  return recipes_.Get(index);
}
inline ::operations_research::data::rcpsp::Recipe* Task::add_recipes() {
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.Task.recipes)
  return recipes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Recipe >&
Task::recipes() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.Task.recipes)
  return recipes_;
}

// repeated .operations_research.data.rcpsp.PerSuccessorDelays successor_delays = 3;
inline int Task::successor_delays_size() const {
  return successor_delays_.size();
}
inline void Task::clear_successor_delays() {
  successor_delays_.Clear();
}
inline ::operations_research::data::rcpsp::PerSuccessorDelays* Task::mutable_successor_delays(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.Task.successor_delays)
  return successor_delays_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerSuccessorDelays >*
Task::mutable_successor_delays() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.Task.successor_delays)
  return &successor_delays_;
}
inline const ::operations_research::data::rcpsp::PerSuccessorDelays& Task::successor_delays(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.Task.successor_delays)
  return successor_delays_.Get(index);
}
inline ::operations_research::data::rcpsp::PerSuccessorDelays* Task::add_successor_delays() {
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.Task.successor_delays)
  return successor_delays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::PerSuccessorDelays >&
Task::successor_delays() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.Task.successor_delays)
  return successor_delays_;
}

// -------------------------------------------------------------------

// RcpspProblem

// repeated .operations_research.data.rcpsp.Resource resources = 1;
inline int RcpspProblem::resources_size() const {
  return resources_.size();
}
inline void RcpspProblem::clear_resources() {
  resources_.Clear();
}
inline ::operations_research::data::rcpsp::Resource* RcpspProblem::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.RcpspProblem.resources)
  return resources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Resource >*
RcpspProblem::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.RcpspProblem.resources)
  return &resources_;
}
inline const ::operations_research::data::rcpsp::Resource& RcpspProblem::resources(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.resources)
  return resources_.Get(index);
}
inline ::operations_research::data::rcpsp::Resource* RcpspProblem::add_resources() {
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.RcpspProblem.resources)
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Resource >&
RcpspProblem::resources() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.RcpspProblem.resources)
  return resources_;
}

// repeated .operations_research.data.rcpsp.Task tasks = 2;
inline int RcpspProblem::tasks_size() const {
  return tasks_.size();
}
inline void RcpspProblem::clear_tasks() {
  tasks_.Clear();
}
inline ::operations_research::data::rcpsp::Task* RcpspProblem::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.RcpspProblem.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Task >*
RcpspProblem::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.data.rcpsp.RcpspProblem.tasks)
  return &tasks_;
}
inline const ::operations_research::data::rcpsp::Task& RcpspProblem::tasks(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.tasks)
  return tasks_.Get(index);
}
inline ::operations_research::data::rcpsp::Task* RcpspProblem::add_tasks() {
  // @@protoc_insertion_point(field_add:operations_research.data.rcpsp.RcpspProblem.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::data::rcpsp::Task >&
RcpspProblem::tasks() const {
  // @@protoc_insertion_point(field_list:operations_research.data.rcpsp.RcpspProblem.tasks)
  return tasks_;
}

// bool is_consumer_producer = 3;
inline void RcpspProblem::clear_is_consumer_producer() {
  is_consumer_producer_ = false;
}
inline bool RcpspProblem::is_consumer_producer() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.is_consumer_producer)
  return is_consumer_producer_;
}
inline void RcpspProblem::set_is_consumer_producer(bool value) {
  
  is_consumer_producer_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.is_consumer_producer)
}

// bool is_resource_investment = 4;
inline void RcpspProblem::clear_is_resource_investment() {
  is_resource_investment_ = false;
}
inline bool RcpspProblem::is_resource_investment() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.is_resource_investment)
  return is_resource_investment_;
}
inline void RcpspProblem::set_is_resource_investment(bool value) {
  
  is_resource_investment_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.is_resource_investment)
}

// bool is_rcpsp_max = 5;
inline void RcpspProblem::clear_is_rcpsp_max() {
  is_rcpsp_max_ = false;
}
inline bool RcpspProblem::is_rcpsp_max() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.is_rcpsp_max)
  return is_rcpsp_max_;
}
inline void RcpspProblem::set_is_rcpsp_max(bool value) {
  
  is_rcpsp_max_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.is_rcpsp_max)
}

// int32 deadline = 6;
inline void RcpspProblem::clear_deadline() {
  deadline_ = 0;
}
inline ::google::protobuf::int32 RcpspProblem::deadline() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.deadline)
  return deadline_;
}
inline void RcpspProblem::set_deadline(::google::protobuf::int32 value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.deadline)
}

// int32 horizon = 7;
inline void RcpspProblem::clear_horizon() {
  horizon_ = 0;
}
inline ::google::protobuf::int32 RcpspProblem::horizon() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.horizon)
  return horizon_;
}
inline void RcpspProblem::set_horizon(::google::protobuf::int32 value) {
  
  horizon_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.horizon)
}

// int32 release_date = 8;
inline void RcpspProblem::clear_release_date() {
  release_date_ = 0;
}
inline ::google::protobuf::int32 RcpspProblem::release_date() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.release_date)
  return release_date_;
}
inline void RcpspProblem::set_release_date(::google::protobuf::int32 value) {
  
  release_date_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.release_date)
}

// int32 tardiness_cost = 9;
inline void RcpspProblem::clear_tardiness_cost() {
  tardiness_cost_ = 0;
}
inline ::google::protobuf::int32 RcpspProblem::tardiness_cost() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.tardiness_cost)
  return tardiness_cost_;
}
inline void RcpspProblem::set_tardiness_cost(::google::protobuf::int32 value) {
  
  tardiness_cost_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.tardiness_cost)
}

// int32 mpm_time = 10;
inline void RcpspProblem::clear_mpm_time() {
  mpm_time_ = 0;
}
inline ::google::protobuf::int32 RcpspProblem::mpm_time() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.mpm_time)
  return mpm_time_;
}
inline void RcpspProblem::set_mpm_time(::google::protobuf::int32 value) {
  
  mpm_time_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.mpm_time)
}

// int64 seed = 11;
inline void RcpspProblem::clear_seed() {
  seed_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 RcpspProblem::seed() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.seed)
  return seed_;
}
inline void RcpspProblem::set_seed(::google::protobuf::int64 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.seed)
}

// string basedata = 12;
inline void RcpspProblem::clear_basedata() {
  basedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RcpspProblem::basedata() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.basedata)
  return basedata_.GetNoArena();
}
inline void RcpspProblem::set_basedata(const ::std::string& value) {
  
  basedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.basedata)
}
#if LANG_CXX11
inline void RcpspProblem::set_basedata(::std::string&& value) {
  
  basedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:operations_research.data.rcpsp.RcpspProblem.basedata)
}
#endif
inline void RcpspProblem::set_basedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.data.rcpsp.RcpspProblem.basedata)
}
inline void RcpspProblem::set_basedata(const char* value, size_t size) {
  
  basedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.data.rcpsp.RcpspProblem.basedata)
}
inline ::std::string* RcpspProblem::mutable_basedata() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.RcpspProblem.basedata)
  return basedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcpspProblem::release_basedata() {
  // @@protoc_insertion_point(field_release:operations_research.data.rcpsp.RcpspProblem.basedata)
  
  return basedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcpspProblem::set_allocated_basedata(::std::string* basedata) {
  if (basedata != nullptr) {
    
  } else {
    
  }
  basedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basedata);
  // @@protoc_insertion_point(field_set_allocated:operations_research.data.rcpsp.RcpspProblem.basedata)
}

// int32 due_date = 13;
inline void RcpspProblem::clear_due_date() {
  due_date_ = 0;
}
inline ::google::protobuf::int32 RcpspProblem::due_date() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.due_date)
  return due_date_;
}
inline void RcpspProblem::set_due_date(::google::protobuf::int32 value) {
  
  due_date_ = value;
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.due_date)
}

// string name = 14;
inline void RcpspProblem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RcpspProblem::name() const {
  // @@protoc_insertion_point(field_get:operations_research.data.rcpsp.RcpspProblem.name)
  return name_.GetNoArena();
}
inline void RcpspProblem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.data.rcpsp.RcpspProblem.name)
}
#if LANG_CXX11
inline void RcpspProblem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:operations_research.data.rcpsp.RcpspProblem.name)
}
#endif
inline void RcpspProblem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.data.rcpsp.RcpspProblem.name)
}
inline void RcpspProblem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.data.rcpsp.RcpspProblem.name)
}
inline ::std::string* RcpspProblem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.data.rcpsp.RcpspProblem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcpspProblem::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.data.rcpsp.RcpspProblem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcpspProblem::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:operations_research.data.rcpsp.RcpspProblem.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rcpsp
}  // namespace data
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ortools_2fdata_2frcpsp_2eproto
