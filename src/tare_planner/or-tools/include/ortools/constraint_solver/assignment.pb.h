// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/assignment.proto

#ifndef PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fassignment_2eproto
#define PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fassignment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2fassignment_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ortools_2fconstraint_5fsolver_2fassignment_2eproto();
namespace operations_research {
class AssignmentProto;
class AssignmentProtoDefaultTypeInternal;
extern AssignmentProtoDefaultTypeInternal _AssignmentProto_default_instance_;
class IntVarAssignment;
class IntVarAssignmentDefaultTypeInternal;
extern IntVarAssignmentDefaultTypeInternal _IntVarAssignment_default_instance_;
class IntervalVarAssignment;
class IntervalVarAssignmentDefaultTypeInternal;
extern IntervalVarAssignmentDefaultTypeInternal _IntervalVarAssignment_default_instance_;
class SequenceVarAssignment;
class SequenceVarAssignmentDefaultTypeInternal;
extern SequenceVarAssignmentDefaultTypeInternal _SequenceVarAssignment_default_instance_;
class WorkerInfo;
class WorkerInfoDefaultTypeInternal;
extern WorkerInfoDefaultTypeInternal _WorkerInfo_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
template<> ::operations_research::AssignmentProto* Arena::CreateMaybeMessage<::operations_research::AssignmentProto>(Arena*);
template<> ::operations_research::IntVarAssignment* Arena::CreateMaybeMessage<::operations_research::IntVarAssignment>(Arena*);
template<> ::operations_research::IntervalVarAssignment* Arena::CreateMaybeMessage<::operations_research::IntervalVarAssignment>(Arena*);
template<> ::operations_research::SequenceVarAssignment* Arena::CreateMaybeMessage<::operations_research::SequenceVarAssignment>(Arena*);
template<> ::operations_research::WorkerInfo* Arena::CreateMaybeMessage<::operations_research::WorkerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace operations_research {

// ===================================================================

class IntVarAssignment :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.IntVarAssignment) */ {
 public:
  IntVarAssignment();
  virtual ~IntVarAssignment();

  IntVarAssignment(const IntVarAssignment& from);

  inline IntVarAssignment& operator=(const IntVarAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntVarAssignment(IntVarAssignment&& from) noexcept
    : IntVarAssignment() {
    *this = ::std::move(from);
  }

  inline IntVarAssignment& operator=(IntVarAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntVarAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntVarAssignment* internal_default_instance() {
    return reinterpret_cast<const IntVarAssignment*>(
               &_IntVarAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IntVarAssignment* other);
  friend void swap(IntVarAssignment& a, IntVarAssignment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntVarAssignment* New() const final {
    return CreateMaybeMessage<IntVarAssignment>(nullptr);
  }

  IntVarAssignment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntVarAssignment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntVarAssignment& from);
  void MergeFrom(const IntVarAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVarAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string var_id = 1;
  void clear_var_id();
  static const int kVarIdFieldNumber = 1;
  const ::std::string& var_id() const;
  void set_var_id(const ::std::string& value);
  #if LANG_CXX11
  void set_var_id(::std::string&& value);
  #endif
  void set_var_id(const char* value);
  void set_var_id(const char* value, size_t size);
  ::std::string* mutable_var_id();
  ::std::string* release_var_id();
  void set_allocated_var_id(::std::string* var_id);

  // int64 min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  ::google::protobuf::int64 min() const;
  void set_min(::google::protobuf::int64 value);

  // int64 max = 3;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  ::google::protobuf::int64 max() const;
  void set_max(::google::protobuf::int64 value);

  // bool active = 4;
  void clear_active();
  static const int kActiveFieldNumber = 4;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:operations_research.IntVarAssignment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr var_id_;
  ::google::protobuf::int64 min_;
  ::google::protobuf::int64 max_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};
// -------------------------------------------------------------------

class IntervalVarAssignment :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.IntervalVarAssignment) */ {
 public:
  IntervalVarAssignment();
  virtual ~IntervalVarAssignment();

  IntervalVarAssignment(const IntervalVarAssignment& from);

  inline IntervalVarAssignment& operator=(const IntervalVarAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntervalVarAssignment(IntervalVarAssignment&& from) noexcept
    : IntervalVarAssignment() {
    *this = ::std::move(from);
  }

  inline IntervalVarAssignment& operator=(IntervalVarAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntervalVarAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalVarAssignment* internal_default_instance() {
    return reinterpret_cast<const IntervalVarAssignment*>(
               &_IntervalVarAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IntervalVarAssignment* other);
  friend void swap(IntervalVarAssignment& a, IntervalVarAssignment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntervalVarAssignment* New() const final {
    return CreateMaybeMessage<IntervalVarAssignment>(nullptr);
  }

  IntervalVarAssignment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntervalVarAssignment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntervalVarAssignment& from);
  void MergeFrom(const IntervalVarAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalVarAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string var_id = 1;
  void clear_var_id();
  static const int kVarIdFieldNumber = 1;
  const ::std::string& var_id() const;
  void set_var_id(const ::std::string& value);
  #if LANG_CXX11
  void set_var_id(::std::string&& value);
  #endif
  void set_var_id(const char* value);
  void set_var_id(const char* value, size_t size);
  ::std::string* mutable_var_id();
  ::std::string* release_var_id();
  void set_allocated_var_id(::std::string* var_id);

  // int64 start_min = 2;
  void clear_start_min();
  static const int kStartMinFieldNumber = 2;
  ::google::protobuf::int64 start_min() const;
  void set_start_min(::google::protobuf::int64 value);

  // int64 start_max = 3;
  void clear_start_max();
  static const int kStartMaxFieldNumber = 3;
  ::google::protobuf::int64 start_max() const;
  void set_start_max(::google::protobuf::int64 value);

  // int64 duration_min = 4;
  void clear_duration_min();
  static const int kDurationMinFieldNumber = 4;
  ::google::protobuf::int64 duration_min() const;
  void set_duration_min(::google::protobuf::int64 value);

  // int64 duration_max = 5;
  void clear_duration_max();
  static const int kDurationMaxFieldNumber = 5;
  ::google::protobuf::int64 duration_max() const;
  void set_duration_max(::google::protobuf::int64 value);

  // int64 end_min = 6;
  void clear_end_min();
  static const int kEndMinFieldNumber = 6;
  ::google::protobuf::int64 end_min() const;
  void set_end_min(::google::protobuf::int64 value);

  // int64 end_max = 7;
  void clear_end_max();
  static const int kEndMaxFieldNumber = 7;
  ::google::protobuf::int64 end_max() const;
  void set_end_max(::google::protobuf::int64 value);

  // int64 performed_min = 8;
  void clear_performed_min();
  static const int kPerformedMinFieldNumber = 8;
  ::google::protobuf::int64 performed_min() const;
  void set_performed_min(::google::protobuf::int64 value);

  // int64 performed_max = 9;
  void clear_performed_max();
  static const int kPerformedMaxFieldNumber = 9;
  ::google::protobuf::int64 performed_max() const;
  void set_performed_max(::google::protobuf::int64 value);

  // bool active = 10;
  void clear_active();
  static const int kActiveFieldNumber = 10;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:operations_research.IntervalVarAssignment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr var_id_;
  ::google::protobuf::int64 start_min_;
  ::google::protobuf::int64 start_max_;
  ::google::protobuf::int64 duration_min_;
  ::google::protobuf::int64 duration_max_;
  ::google::protobuf::int64 end_min_;
  ::google::protobuf::int64 end_max_;
  ::google::protobuf::int64 performed_min_;
  ::google::protobuf::int64 performed_max_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};
// -------------------------------------------------------------------

class SequenceVarAssignment :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.SequenceVarAssignment) */ {
 public:
  SequenceVarAssignment();
  virtual ~SequenceVarAssignment();

  SequenceVarAssignment(const SequenceVarAssignment& from);

  inline SequenceVarAssignment& operator=(const SequenceVarAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SequenceVarAssignment(SequenceVarAssignment&& from) noexcept
    : SequenceVarAssignment() {
    *this = ::std::move(from);
  }

  inline SequenceVarAssignment& operator=(SequenceVarAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SequenceVarAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SequenceVarAssignment* internal_default_instance() {
    return reinterpret_cast<const SequenceVarAssignment*>(
               &_SequenceVarAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SequenceVarAssignment* other);
  friend void swap(SequenceVarAssignment& a, SequenceVarAssignment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SequenceVarAssignment* New() const final {
    return CreateMaybeMessage<SequenceVarAssignment>(nullptr);
  }

  SequenceVarAssignment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SequenceVarAssignment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SequenceVarAssignment& from);
  void MergeFrom(const SequenceVarAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SequenceVarAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 forward_sequence = 2;
  int forward_sequence_size() const;
  void clear_forward_sequence();
  static const int kForwardSequenceFieldNumber = 2;
  ::google::protobuf::int32 forward_sequence(int index) const;
  void set_forward_sequence(int index, ::google::protobuf::int32 value);
  void add_forward_sequence(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      forward_sequence() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_forward_sequence();

  // repeated int32 backward_sequence = 3;
  int backward_sequence_size() const;
  void clear_backward_sequence();
  static const int kBackwardSequenceFieldNumber = 3;
  ::google::protobuf::int32 backward_sequence(int index) const;
  void set_backward_sequence(int index, ::google::protobuf::int32 value);
  void add_backward_sequence(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      backward_sequence() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_backward_sequence();

  // repeated int32 unperformed = 4;
  int unperformed_size() const;
  void clear_unperformed();
  static const int kUnperformedFieldNumber = 4;
  ::google::protobuf::int32 unperformed(int index) const;
  void set_unperformed(int index, ::google::protobuf::int32 value);
  void add_unperformed(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unperformed() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unperformed();

  // string var_id = 1;
  void clear_var_id();
  static const int kVarIdFieldNumber = 1;
  const ::std::string& var_id() const;
  void set_var_id(const ::std::string& value);
  #if LANG_CXX11
  void set_var_id(::std::string&& value);
  #endif
  void set_var_id(const char* value);
  void set_var_id(const char* value, size_t size);
  ::std::string* mutable_var_id();
  ::std::string* release_var_id();
  void set_allocated_var_id(::std::string* var_id);

  // bool active = 5;
  void clear_active();
  static const int kActiveFieldNumber = 5;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:operations_research.SequenceVarAssignment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > forward_sequence_;
  mutable std::atomic<int> _forward_sequence_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > backward_sequence_;
  mutable std::atomic<int> _backward_sequence_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unperformed_;
  mutable std::atomic<int> _unperformed_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr var_id_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};
// -------------------------------------------------------------------

class WorkerInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.WorkerInfo) */ {
 public:
  WorkerInfo();
  virtual ~WorkerInfo();

  WorkerInfo(const WorkerInfo& from);

  inline WorkerInfo& operator=(const WorkerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkerInfo(WorkerInfo&& from) noexcept
    : WorkerInfo() {
    *this = ::std::move(from);
  }

  inline WorkerInfo& operator=(WorkerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerInfo* internal_default_instance() {
    return reinterpret_cast<const WorkerInfo*>(
               &_WorkerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(WorkerInfo* other);
  friend void swap(WorkerInfo& a, WorkerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkerInfo* New() const final {
    return CreateMaybeMessage<WorkerInfo>(nullptr);
  }

  WorkerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkerInfo& from);
  void MergeFrom(const WorkerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bns = 2;
  void clear_bns();
  static const int kBnsFieldNumber = 2;
  const ::std::string& bns() const;
  void set_bns(const ::std::string& value);
  #if LANG_CXX11
  void set_bns(::std::string&& value);
  #endif
  void set_bns(const char* value);
  void set_bns(const char* value, size_t size);
  ::std::string* mutable_bns();
  ::std::string* release_bns();
  void set_allocated_bns(::std::string* bns);

  // int32 worker_id = 1;
  void clear_worker_id();
  static const int kWorkerIdFieldNumber = 1;
  ::google::protobuf::int32 worker_id() const;
  void set_worker_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:operations_research.WorkerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bns_;
  ::google::protobuf::int32 worker_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};
// -------------------------------------------------------------------

class AssignmentProto :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.AssignmentProto) */ {
 public:
  AssignmentProto();
  virtual ~AssignmentProto();

  AssignmentProto(const AssignmentProto& from);

  inline AssignmentProto& operator=(const AssignmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssignmentProto(AssignmentProto&& from) noexcept
    : AssignmentProto() {
    *this = ::std::move(from);
  }

  inline AssignmentProto& operator=(AssignmentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AssignmentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignmentProto* internal_default_instance() {
    return reinterpret_cast<const AssignmentProto*>(
               &_AssignmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AssignmentProto* other);
  friend void swap(AssignmentProto& a, AssignmentProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssignmentProto* New() const final {
    return CreateMaybeMessage<AssignmentProto>(nullptr);
  }

  AssignmentProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssignmentProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssignmentProto& from);
  void MergeFrom(const AssignmentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignmentProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .operations_research.IntVarAssignment int_var_assignment = 1;
  int int_var_assignment_size() const;
  void clear_int_var_assignment();
  static const int kIntVarAssignmentFieldNumber = 1;
  ::operations_research::IntVarAssignment* mutable_int_var_assignment(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >*
      mutable_int_var_assignment();
  const ::operations_research::IntVarAssignment& int_var_assignment(int index) const;
  ::operations_research::IntVarAssignment* add_int_var_assignment();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >&
      int_var_assignment() const;

  // repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
  int interval_var_assignment_size() const;
  void clear_interval_var_assignment();
  static const int kIntervalVarAssignmentFieldNumber = 2;
  ::operations_research::IntervalVarAssignment* mutable_interval_var_assignment(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment >*
      mutable_interval_var_assignment();
  const ::operations_research::IntervalVarAssignment& interval_var_assignment(int index) const;
  ::operations_research::IntervalVarAssignment* add_interval_var_assignment();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment >&
      interval_var_assignment() const;

  // repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
  int sequence_var_assignment_size() const;
  void clear_sequence_var_assignment();
  static const int kSequenceVarAssignmentFieldNumber = 6;
  ::operations_research::SequenceVarAssignment* mutable_sequence_var_assignment(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment >*
      mutable_sequence_var_assignment();
  const ::operations_research::SequenceVarAssignment& sequence_var_assignment(int index) const;
  ::operations_research::SequenceVarAssignment* add_sequence_var_assignment();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment >&
      sequence_var_assignment() const;

  // .operations_research.IntVarAssignment objective = 3;
  bool has_objective() const;
  void clear_objective();
  static const int kObjectiveFieldNumber = 3;
  const ::operations_research::IntVarAssignment& objective() const;
  ::operations_research::IntVarAssignment* release_objective();
  ::operations_research::IntVarAssignment* mutable_objective();
  void set_allocated_objective(::operations_research::IntVarAssignment* objective);

  // .operations_research.WorkerInfo worker_info = 4;
  bool has_worker_info() const;
  void clear_worker_info();
  static const int kWorkerInfoFieldNumber = 4;
  const ::operations_research::WorkerInfo& worker_info() const;
  ::operations_research::WorkerInfo* release_worker_info();
  ::operations_research::WorkerInfo* mutable_worker_info();
  void set_allocated_worker_info(::operations_research::WorkerInfo* worker_info);

  // bool is_valid = 5;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 5;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:operations_research.AssignmentProto)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment > int_var_assignment_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment > interval_var_assignment_;
  ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment > sequence_var_assignment_;
  ::operations_research::IntVarAssignment* objective_;
  ::operations_research::WorkerInfo* worker_info_;
  bool is_valid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntVarAssignment

// string var_id = 1;
inline void IntVarAssignment::clear_var_id() {
  var_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IntVarAssignment::var_id() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.var_id)
  return var_id_.GetNoArena();
}
inline void IntVarAssignment::set_var_id(const ::std::string& value) {
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.var_id)
}
#if LANG_CXX11
inline void IntVarAssignment::set_var_id(::std::string&& value) {
  
  var_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:operations_research.IntVarAssignment.var_id)
}
#endif
inline void IntVarAssignment::set_var_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.IntVarAssignment.var_id)
}
inline void IntVarAssignment::set_var_id(const char* value, size_t size) {
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.IntVarAssignment.var_id)
}
inline ::std::string* IntVarAssignment::mutable_var_id() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.IntVarAssignment.var_id)
  return var_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IntVarAssignment::release_var_id() {
  // @@protoc_insertion_point(field_release:operations_research.IntVarAssignment.var_id)
  
  return var_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IntVarAssignment::set_allocated_var_id(::std::string* var_id) {
  if (var_id != nullptr) {
    
  } else {
    
  }
  var_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var_id);
  // @@protoc_insertion_point(field_set_allocated:operations_research.IntVarAssignment.var_id)
}

// int64 min = 2;
inline void IntVarAssignment::clear_min() {
  min_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntVarAssignment::min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.min)
  return min_;
}
inline void IntVarAssignment::set_min(::google::protobuf::int64 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.min)
}

// int64 max = 3;
inline void IntVarAssignment::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntVarAssignment::max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.max)
  return max_;
}
inline void IntVarAssignment::set_max(::google::protobuf::int64 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.max)
}

// bool active = 4;
inline void IntVarAssignment::clear_active() {
  active_ = false;
}
inline bool IntVarAssignment::active() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.active)
  return active_;
}
inline void IntVarAssignment::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.active)
}

// -------------------------------------------------------------------

// IntervalVarAssignment

// string var_id = 1;
inline void IntervalVarAssignment::clear_var_id() {
  var_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IntervalVarAssignment::var_id() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.var_id)
  return var_id_.GetNoArena();
}
inline void IntervalVarAssignment::set_var_id(const ::std::string& value) {
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.var_id)
}
#if LANG_CXX11
inline void IntervalVarAssignment::set_var_id(::std::string&& value) {
  
  var_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:operations_research.IntervalVarAssignment.var_id)
}
#endif
inline void IntervalVarAssignment::set_var_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.IntervalVarAssignment.var_id)
}
inline void IntervalVarAssignment::set_var_id(const char* value, size_t size) {
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.IntervalVarAssignment.var_id)
}
inline ::std::string* IntervalVarAssignment::mutable_var_id() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.IntervalVarAssignment.var_id)
  return var_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IntervalVarAssignment::release_var_id() {
  // @@protoc_insertion_point(field_release:operations_research.IntervalVarAssignment.var_id)
  
  return var_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalVarAssignment::set_allocated_var_id(::std::string* var_id) {
  if (var_id != nullptr) {
    
  } else {
    
  }
  var_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var_id);
  // @@protoc_insertion_point(field_set_allocated:operations_research.IntervalVarAssignment.var_id)
}

// int64 start_min = 2;
inline void IntervalVarAssignment::clear_start_min() {
  start_min_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::start_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.start_min)
  return start_min_;
}
inline void IntervalVarAssignment::set_start_min(::google::protobuf::int64 value) {
  
  start_min_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.start_min)
}

// int64 start_max = 3;
inline void IntervalVarAssignment::clear_start_max() {
  start_max_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::start_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.start_max)
  return start_max_;
}
inline void IntervalVarAssignment::set_start_max(::google::protobuf::int64 value) {
  
  start_max_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.start_max)
}

// int64 duration_min = 4;
inline void IntervalVarAssignment::clear_duration_min() {
  duration_min_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::duration_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.duration_min)
  return duration_min_;
}
inline void IntervalVarAssignment::set_duration_min(::google::protobuf::int64 value) {
  
  duration_min_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.duration_min)
}

// int64 duration_max = 5;
inline void IntervalVarAssignment::clear_duration_max() {
  duration_max_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::duration_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.duration_max)
  return duration_max_;
}
inline void IntervalVarAssignment::set_duration_max(::google::protobuf::int64 value) {
  
  duration_max_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.duration_max)
}

// int64 end_min = 6;
inline void IntervalVarAssignment::clear_end_min() {
  end_min_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::end_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.end_min)
  return end_min_;
}
inline void IntervalVarAssignment::set_end_min(::google::protobuf::int64 value) {
  
  end_min_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.end_min)
}

// int64 end_max = 7;
inline void IntervalVarAssignment::clear_end_max() {
  end_max_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::end_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.end_max)
  return end_max_;
}
inline void IntervalVarAssignment::set_end_max(::google::protobuf::int64 value) {
  
  end_max_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.end_max)
}

// int64 performed_min = 8;
inline void IntervalVarAssignment::clear_performed_min() {
  performed_min_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::performed_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.performed_min)
  return performed_min_;
}
inline void IntervalVarAssignment::set_performed_min(::google::protobuf::int64 value) {
  
  performed_min_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.performed_min)
}

// int64 performed_max = 9;
inline void IntervalVarAssignment::clear_performed_max() {
  performed_max_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntervalVarAssignment::performed_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.performed_max)
  return performed_max_;
}
inline void IntervalVarAssignment::set_performed_max(::google::protobuf::int64 value) {
  
  performed_max_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.performed_max)
}

// bool active = 10;
inline void IntervalVarAssignment::clear_active() {
  active_ = false;
}
inline bool IntervalVarAssignment::active() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.active)
  return active_;
}
inline void IntervalVarAssignment::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.active)
}

// -------------------------------------------------------------------

// SequenceVarAssignment

// string var_id = 1;
inline void SequenceVarAssignment::clear_var_id() {
  var_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SequenceVarAssignment::var_id() const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.var_id)
  return var_id_.GetNoArena();
}
inline void SequenceVarAssignment::set_var_id(const ::std::string& value) {
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.var_id)
}
#if LANG_CXX11
inline void SequenceVarAssignment::set_var_id(::std::string&& value) {
  
  var_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:operations_research.SequenceVarAssignment.var_id)
}
#endif
inline void SequenceVarAssignment::set_var_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.SequenceVarAssignment.var_id)
}
inline void SequenceVarAssignment::set_var_id(const char* value, size_t size) {
  
  var_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.SequenceVarAssignment.var_id)
}
inline ::std::string* SequenceVarAssignment::mutable_var_id() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.SequenceVarAssignment.var_id)
  return var_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SequenceVarAssignment::release_var_id() {
  // @@protoc_insertion_point(field_release:operations_research.SequenceVarAssignment.var_id)
  
  return var_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SequenceVarAssignment::set_allocated_var_id(::std::string* var_id) {
  if (var_id != nullptr) {
    
  } else {
    
  }
  var_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var_id);
  // @@protoc_insertion_point(field_set_allocated:operations_research.SequenceVarAssignment.var_id)
}

// repeated int32 forward_sequence = 2;
inline int SequenceVarAssignment::forward_sequence_size() const {
  return forward_sequence_.size();
}
inline void SequenceVarAssignment::clear_forward_sequence() {
  forward_sequence_.Clear();
}
inline ::google::protobuf::int32 SequenceVarAssignment::forward_sequence(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.forward_sequence)
  return forward_sequence_.Get(index);
}
inline void SequenceVarAssignment::set_forward_sequence(int index, ::google::protobuf::int32 value) {
  forward_sequence_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.forward_sequence)
}
inline void SequenceVarAssignment::add_forward_sequence(::google::protobuf::int32 value) {
  forward_sequence_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SequenceVarAssignment.forward_sequence)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SequenceVarAssignment::forward_sequence() const {
  // @@protoc_insertion_point(field_list:operations_research.SequenceVarAssignment.forward_sequence)
  return forward_sequence_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SequenceVarAssignment::mutable_forward_sequence() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SequenceVarAssignment.forward_sequence)
  return &forward_sequence_;
}

// repeated int32 backward_sequence = 3;
inline int SequenceVarAssignment::backward_sequence_size() const {
  return backward_sequence_.size();
}
inline void SequenceVarAssignment::clear_backward_sequence() {
  backward_sequence_.Clear();
}
inline ::google::protobuf::int32 SequenceVarAssignment::backward_sequence(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.backward_sequence)
  return backward_sequence_.Get(index);
}
inline void SequenceVarAssignment::set_backward_sequence(int index, ::google::protobuf::int32 value) {
  backward_sequence_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.backward_sequence)
}
inline void SequenceVarAssignment::add_backward_sequence(::google::protobuf::int32 value) {
  backward_sequence_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SequenceVarAssignment.backward_sequence)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SequenceVarAssignment::backward_sequence() const {
  // @@protoc_insertion_point(field_list:operations_research.SequenceVarAssignment.backward_sequence)
  return backward_sequence_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SequenceVarAssignment::mutable_backward_sequence() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SequenceVarAssignment.backward_sequence)
  return &backward_sequence_;
}

// repeated int32 unperformed = 4;
inline int SequenceVarAssignment::unperformed_size() const {
  return unperformed_.size();
}
inline void SequenceVarAssignment::clear_unperformed() {
  unperformed_.Clear();
}
inline ::google::protobuf::int32 SequenceVarAssignment::unperformed(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.unperformed)
  return unperformed_.Get(index);
}
inline void SequenceVarAssignment::set_unperformed(int index, ::google::protobuf::int32 value) {
  unperformed_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.unperformed)
}
inline void SequenceVarAssignment::add_unperformed(::google::protobuf::int32 value) {
  unperformed_.Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SequenceVarAssignment.unperformed)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SequenceVarAssignment::unperformed() const {
  // @@protoc_insertion_point(field_list:operations_research.SequenceVarAssignment.unperformed)
  return unperformed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SequenceVarAssignment::mutable_unperformed() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SequenceVarAssignment.unperformed)
  return &unperformed_;
}

// bool active = 5;
inline void SequenceVarAssignment::clear_active() {
  active_ = false;
}
inline bool SequenceVarAssignment::active() const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.active)
  return active_;
}
inline void SequenceVarAssignment::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.active)
}

// -------------------------------------------------------------------

// WorkerInfo

// int32 worker_id = 1;
inline void WorkerInfo::clear_worker_id() {
  worker_id_ = 0;
}
inline ::google::protobuf::int32 WorkerInfo::worker_id() const {
  // @@protoc_insertion_point(field_get:operations_research.WorkerInfo.worker_id)
  return worker_id_;
}
inline void WorkerInfo::set_worker_id(::google::protobuf::int32 value) {
  
  worker_id_ = value;
  // @@protoc_insertion_point(field_set:operations_research.WorkerInfo.worker_id)
}

// string bns = 2;
inline void WorkerInfo::clear_bns() {
  bns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkerInfo::bns() const {
  // @@protoc_insertion_point(field_get:operations_research.WorkerInfo.bns)
  return bns_.GetNoArena();
}
inline void WorkerInfo::set_bns(const ::std::string& value) {
  
  bns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:operations_research.WorkerInfo.bns)
}
#if LANG_CXX11
inline void WorkerInfo::set_bns(::std::string&& value) {
  
  bns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:operations_research.WorkerInfo.bns)
}
#endif
inline void WorkerInfo::set_bns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:operations_research.WorkerInfo.bns)
}
inline void WorkerInfo::set_bns(const char* value, size_t size) {
  
  bns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:operations_research.WorkerInfo.bns)
}
inline ::std::string* WorkerInfo::mutable_bns() {
  
  // @@protoc_insertion_point(field_mutable:operations_research.WorkerInfo.bns)
  return bns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkerInfo::release_bns() {
  // @@protoc_insertion_point(field_release:operations_research.WorkerInfo.bns)
  
  return bns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerInfo::set_allocated_bns(::std::string* bns) {
  if (bns != nullptr) {
    
  } else {
    
  }
  bns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bns);
  // @@protoc_insertion_point(field_set_allocated:operations_research.WorkerInfo.bns)
}

// -------------------------------------------------------------------

// AssignmentProto

// repeated .operations_research.IntVarAssignment int_var_assignment = 1;
inline int AssignmentProto::int_var_assignment_size() const {
  return int_var_assignment_.size();
}
inline void AssignmentProto::clear_int_var_assignment() {
  int_var_assignment_.Clear();
}
inline ::operations_research::IntVarAssignment* AssignmentProto::mutable_int_var_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.int_var_assignment)
  return int_var_assignment_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >*
AssignmentProto::mutable_int_var_assignment() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.int_var_assignment)
  return &int_var_assignment_;
}
inline const ::operations_research::IntVarAssignment& AssignmentProto::int_var_assignment(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.int_var_assignment)
  return int_var_assignment_.Get(index);
}
inline ::operations_research::IntVarAssignment* AssignmentProto::add_int_var_assignment() {
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.int_var_assignment)
  return int_var_assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >&
AssignmentProto::int_var_assignment() const {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.int_var_assignment)
  return int_var_assignment_;
}

// repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
inline int AssignmentProto::interval_var_assignment_size() const {
  return interval_var_assignment_.size();
}
inline void AssignmentProto::clear_interval_var_assignment() {
  interval_var_assignment_.Clear();
}
inline ::operations_research::IntervalVarAssignment* AssignmentProto::mutable_interval_var_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.interval_var_assignment)
  return interval_var_assignment_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment >*
AssignmentProto::mutable_interval_var_assignment() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.interval_var_assignment)
  return &interval_var_assignment_;
}
inline const ::operations_research::IntervalVarAssignment& AssignmentProto::interval_var_assignment(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.interval_var_assignment)
  return interval_var_assignment_.Get(index);
}
inline ::operations_research::IntervalVarAssignment* AssignmentProto::add_interval_var_assignment() {
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.interval_var_assignment)
  return interval_var_assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment >&
AssignmentProto::interval_var_assignment() const {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.interval_var_assignment)
  return interval_var_assignment_;
}

// repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
inline int AssignmentProto::sequence_var_assignment_size() const {
  return sequence_var_assignment_.size();
}
inline void AssignmentProto::clear_sequence_var_assignment() {
  sequence_var_assignment_.Clear();
}
inline ::operations_research::SequenceVarAssignment* AssignmentProto::mutable_sequence_var_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.sequence_var_assignment)
  return sequence_var_assignment_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment >*
AssignmentProto::mutable_sequence_var_assignment() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.sequence_var_assignment)
  return &sequence_var_assignment_;
}
inline const ::operations_research::SequenceVarAssignment& AssignmentProto::sequence_var_assignment(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.sequence_var_assignment)
  return sequence_var_assignment_.Get(index);
}
inline ::operations_research::SequenceVarAssignment* AssignmentProto::add_sequence_var_assignment() {
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.sequence_var_assignment)
  return sequence_var_assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment >&
AssignmentProto::sequence_var_assignment() const {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.sequence_var_assignment)
  return sequence_var_assignment_;
}

// .operations_research.IntVarAssignment objective = 3;
inline bool AssignmentProto::has_objective() const {
  return this != internal_default_instance() && objective_ != nullptr;
}
inline void AssignmentProto::clear_objective() {
  if (GetArenaNoVirtual() == nullptr && objective_ != nullptr) {
    delete objective_;
  }
  objective_ = nullptr;
}
inline const ::operations_research::IntVarAssignment& AssignmentProto::objective() const {
  const ::operations_research::IntVarAssignment* p = objective_;
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.objective)
  return p != nullptr ? *p : *reinterpret_cast<const ::operations_research::IntVarAssignment*>(
      &::operations_research::_IntVarAssignment_default_instance_);
}
inline ::operations_research::IntVarAssignment* AssignmentProto::release_objective() {
  // @@protoc_insertion_point(field_release:operations_research.AssignmentProto.objective)
  
  ::operations_research::IntVarAssignment* temp = objective_;
  objective_ = nullptr;
  return temp;
}
inline ::operations_research::IntVarAssignment* AssignmentProto::mutable_objective() {
  
  if (objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::IntVarAssignment>(GetArenaNoVirtual());
    objective_ = p;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.objective)
  return objective_;
}
inline void AssignmentProto::set_allocated_objective(::operations_research::IntVarAssignment* objective) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete objective_;
  }
  if (objective) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      objective = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, objective, submessage_arena);
    }
    
  } else {
    
  }
  objective_ = objective;
  // @@protoc_insertion_point(field_set_allocated:operations_research.AssignmentProto.objective)
}

// .operations_research.WorkerInfo worker_info = 4;
inline bool AssignmentProto::has_worker_info() const {
  return this != internal_default_instance() && worker_info_ != nullptr;
}
inline void AssignmentProto::clear_worker_info() {
  if (GetArenaNoVirtual() == nullptr && worker_info_ != nullptr) {
    delete worker_info_;
  }
  worker_info_ = nullptr;
}
inline const ::operations_research::WorkerInfo& AssignmentProto::worker_info() const {
  const ::operations_research::WorkerInfo* p = worker_info_;
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.worker_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::operations_research::WorkerInfo*>(
      &::operations_research::_WorkerInfo_default_instance_);
}
inline ::operations_research::WorkerInfo* AssignmentProto::release_worker_info() {
  // @@protoc_insertion_point(field_release:operations_research.AssignmentProto.worker_info)
  
  ::operations_research::WorkerInfo* temp = worker_info_;
  worker_info_ = nullptr;
  return temp;
}
inline ::operations_research::WorkerInfo* AssignmentProto::mutable_worker_info() {
  
  if (worker_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::WorkerInfo>(GetArenaNoVirtual());
    worker_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.worker_info)
  return worker_info_;
}
inline void AssignmentProto::set_allocated_worker_info(::operations_research::WorkerInfo* worker_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete worker_info_;
  }
  if (worker_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      worker_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worker_info, submessage_arena);
    }
    
  } else {
    
  }
  worker_info_ = worker_info;
  // @@protoc_insertion_point(field_set_allocated:operations_research.AssignmentProto.worker_info)
}

// bool is_valid = 5;
inline void AssignmentProto::clear_is_valid() {
  is_valid_ = false;
}
inline bool AssignmentProto::is_valid() const {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.is_valid)
  return is_valid_;
}
inline void AssignmentProto::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:operations_research.AssignmentProto.is_valid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations_research

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fassignment_2eproto
